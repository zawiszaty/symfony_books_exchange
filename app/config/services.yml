# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']
#    AppBundle\Provider\:
#        resource: '../../src/AppBundle/Provider'
#        public: true
#        arguments: [ '@doctrine.orm.entity_manager']
    AppBundle\Repository\BookRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments:
            - AppBundle\Entity\Book
        public: true
    AppBundle\Repository\UserRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments:
            - AppBundle\Entity\User
        public: true
    AppBundle\Repository\OfferRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments:
            - AppBundle\Entity\Offer
        public: true

    AppBundle\Book\CommandHandler\AddBookHandler:
        arguments: ['@AppBundle\Repository\BookRepository']
        tags:
            - { name: command_handler, handles: AppBundle\Book\Command\AddBookCommand }
        public: true

    AppBundle\Book\CommandHandler\DeleteBookHandler:
        arguments: ['@AppBundle\Repository\BookRepository']
        tags:
            - { name: command_handler, handles: AppBundle\Book\Command\DeleteBookCommand }
        public: true
    AppBundle\Book\CommandHandler\EditBookHandler:
        arguments: ['@AppBundle\Repository\BookRepository']
        tags:
            - { name: command_handler, handles: AppBundle\Book\Command\EditBookCommand }
        public: true
    AppBundle\Book\QueryView\BooksView:
        arguments: ['@Doctrine\DBAL\Connection']
        public: true

    AppBundle\Offer\CommandHandler\AddOfferHandler:
        arguments: ['@AppBundle\Repository\BookRepository', '@AppBundle\Repository\OfferRepository', '@AppBundle\Repository\UserRepository']
        tags:
            - { name: command_handler, handles: AppBundle\Offer\Command\AddOfferCommand }
        public: true
    AppBundle\Offer\CommandHandler\AcceptedOfferHandler:
        arguments: ['@AppBundle\Repository\BookRepository', '@AppBundle\Repository\OfferRepository', '@AppBundle\Repository\UserRepository']
        tags:
            - { name: command_handler, handles: AppBundle\Offer\Command\AcceptedOfferCommand }
        public: true
    AppBundle\Offer\CommandHandler\RejectedOfferHandler:
        arguments: ['@AppBundle\Repository\BookRepository', '@AppBundle\Repository\OfferRepository', '@AppBundle\Repository\UserRepository']
        tags:
            - { name: command_handler, handles: AppBundle\Offer\Command\RejectedOfferCommand }
        public: true
    AppBundle\Offer\CommandHandler\SeenOfferHandler:
        arguments: ['@AppBundle\Repository\OfferRepository']
        tags:
            - { name: command_handler, handles: AppBundle\Offer\Command\SeenOfferCommand }
        public: true


    AppBundle\Offer\QueryView\OfferView:
        arguments: ['@Doctrine\DBAL\Connection', '@AppBundle\Repository\UserRepository']
        public: true
    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'